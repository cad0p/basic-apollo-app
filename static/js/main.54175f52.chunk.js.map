{"version":3,"sources":["App.js","Auth.js","serviceWorker.js","index.js"],"names":["PL_SUB","gql","PL_WITH_LOVE_SUB","VOTE_MUTATION","LOVE_MUTATION","UNLOVE_MUTATION","App","authState","isIn","status","headers","Authorization","token","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","connectionParams","link","split","query","getMainDefinition","kind","operation","client","ApolloClient","cache","InMemoryCache","subscription","variables","userId","user","uid","data","loading","error","message","className","programming_language","map","pl","name","vote_count","content","lovedLanguagesByname_aggregate","aggregate","count","mutation","unlove","onClick","love","key","vote","serviceAccount","require","provider","firebase","auth","GoogleAuthProvider","Auth","useState","setAuthState","useEffect","onAuthStateChanged","a","getIdToken","getIdTokenResult","idTokenResult","claims","database","ref","on","exists","signInWithGoogle","signInWithPopup","console","log","signOut","displayName","initializeApp","credential","cert","databaseURL","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54175f52.chunk.js","sourcesContent":["import { InMemoryCache } from 'apollo-cache-inmemory'\nimport ApolloClient from 'apollo-client'\nimport { split } from 'apollo-link'\nimport { HttpLink } from 'apollo-link-http'\nimport { WebSocketLink } from 'apollo-link-ws'\nimport { getMainDefinition } from 'apollo-utilities'\nimport gql from 'graphql-tag'\nimport React from 'react'\nimport { ApolloProvider, Mutation, Subscription } from 'react-apollo'\n\nconst PL_SUB = gql`\n  subscription PL {\n    programming_language(order_by: { vote_count: desc }) {\n      name\n      vote_count\n    }\n  }\n`\n\nconst PL_WITH_LOVE_SUB = gql`\n  subscription PL_WITH_LOVE($userId: String!) {\n    programming_language(order_by: { vote_count: desc }) {\n      name\n      vote_count\n      lovedLanguagesByname_aggregate(where: { user_id: { _eq: $userId } }) {\n        aggregate {\n          count\n        }\n      }\n    }\n  }\n`\nconst VOTE_MUTATION = gql`\n  mutation Vote($name: String!) {\n    update_programming_language(\n      _inc: { vote_count: 1 }\n      where: { name: { _eq: $name } }\n    ) {\n      returning {\n        vote_count\n      }\n    }\n  }\n`\nconst LOVE_MUTATION = gql`\n  mutation Love($name: String!) {\n    insert_loved_language(objects: { name: $name }) {\n      affected_rows\n    }\n  }\n`\n\nconst UNLOVE_MUTATION = gql`\n  mutation Unlove($name: String!) {\n    delete_loved_language(where: { name: { _eq: $name } }) {\n      affected_rows\n    }\n  }\n`\n\nexport default function App({ authState }) {\n  const isIn = authState.status === 'in'\n\n  const headers = isIn ? { Authorization: `Bearer ${authState.token}` } : {}\n\n  const httpLink = new HttpLink({\n    uri: 'https://hasura-up-style.herokuapp.com/v1alpha1/graphql',\n    headers,\n  })\n\n  const wsLink = new WebSocketLink({\n    uri: 'wss://hasura-up-style.herokuapp.com/v1alpha1/graphql',\n    options: {\n      reconnect: true,\n      connectionParams: {\n        headers,\n      },\n    },\n  })\n\n  const link = split(\n    ({ query }) => {\n      const { kind, operation } = getMainDefinition(query)\n      return kind === 'OperationDefinition' && operation === 'subscription'\n    },\n    wsLink,\n    httpLink,\n  )\n\n  const client = new ApolloClient({\n    link,\n    cache: new InMemoryCache(),\n  })\n\n  return (\n    <ApolloProvider client={client}>\n      <Subscription\n        subscription={isIn ? PL_WITH_LOVE_SUB : PL_SUB}\n        variables={\n          isIn\n            ? {\n                userId: authState.user.uid,\n              }\n            : null\n        }\n      >\n        {({ data, loading, error }) => {\n          if (loading) return 'loading...'\n          if (error) return error.message\n\n          return (\n            <ul className=\"pl-list\">\n              {data.programming_language.map(pl => {\n                const { name, vote_count } = pl\n\n                let content = null\n                if (isIn) {\n                  const isLoved =\n                    pl.lovedLanguagesByname_aggregate.aggregate.count === 1\n                  if (isLoved) {\n                    content = (\n                      <Mutation mutation={UNLOVE_MUTATION} variables={{ name }}>\n                        {unlove => <button onClick={unlove}>Unlove</button>}\n                      </Mutation>\n                    )\n                  } else {\n                    content = (\n                      <Mutation mutation={LOVE_MUTATION} variables={{ name }}>\n                        {love => <button onClick={love}>Love</button>}\n                      </Mutation>\n                    )\n                  }\n                }\n\n                return (\n                  <li key={name}>\n                    <span>{`${name} - ${vote_count}`}</span>\n                    <span>\n                      <Mutation mutation={VOTE_MUTATION} variables={{ name }}>\n                        {vote => <button onClick={vote}>Vote</button>}\n                      </Mutation>\n                      {content}\n                    </span>\n                  </li>\n                )\n              })}\n            </ul>\n          )\n        }}\n      </Subscription>\n    </ApolloProvider>\n  )\n}","import firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport React, { useState, useEffect } from 'react'\nimport App from './App'\n\n\n\nvar serviceAccount = require(\"./serviceAccountKey.json\");\n\n// admin.initializeApp({\n//   credential: admin.credential.cert(serviceAccount),\n//   databaseURL: \"https://style-ca5e3.firebaseio.com\"\n// });\n\nconst provider = new firebase.auth.GoogleAuthProvider()\n\nfirebase.initializeApp({\n  // apiKey: 'xxx',\n  // authDomain: 'xxx',\n  credential: firebase.credential.cert(serviceAccount),\n  databaseURL: 'https://style-ca5e3.firebaseio.com',\n  // projectId: 'xxx',\n  // storageBucket: 'xxx',\n  // messagingSenderId: 'xxx',\n})\n\nexport default function Auth() {\n  const [authState, setAuthState] = useState({ status: 'loading' })\n\n  useEffect(() => {\n    return firebase.auth().onAuthStateChanged(async user => {\n      if (user) {\n        const token = await user.getIdToken()\n        const idTokenResult = await user.getIdTokenResult()\n        const hasuraClaim = idTokenResult.claims['https://hasura.io/jwt/claims']\n\n        if (hasuraClaim) {\n          setAuthState({ status: 'in', user, token })\n        } else {\n          // Check if refresh is required.\n          const metadataRef = firebase\n            .database()\n            .ref('metadata/' + user.uid + '/refreshTime')\n\n          metadataRef.on('value', async data => {\n            if (!data.exists) {\n              return\n            }\n            // Force refresh to pick up the latest custom claims changes.\n            // Note this is always triggered on first call. Further optimization could be\n            // added to avoid the initial trigger when the token is issued and already contains\n            // the latest claims.\n            const token = await user.getIdToken(true)\n            setAuthState({ status: 'in', user, token })\n          })\n        }\n      } else {\n        setAuthState({ status: 'out' })\n      }\n    })\n  }, [])\n\n  const signInWithGoogle = async () => {\n    try {\n      await firebase.auth().signInWithPopup(provider)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const signOut = async () => {\n    try {\n      setAuthState({ status: 'loading' })\n      await firebase.auth().signOut()\n      setAuthState({ status: 'out' })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  let content\n  if (authState.status === 'loading') {\n    content = null\n  } else {\n    content = (\n      <>\n        <div>\n          {authState.status === 'in' ? (\n            <div>\n              <h2>Welcome, {authState.user.displayName}</h2>\n              <button onClick={signOut}>Sign out</button>\n            </div>\n          ) : (\n            <button onClick={signInWithGoogle}>Sign in with Google</button>\n          )}\n        </div>\n\n        <App authState={authState} />\n      </>\n    )\n  }\n\n  return <div className=\"auth\">{content}</div>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Auth from './Auth'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Auth />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()"],"sourceRoot":""}